{"version":3,"sources":["Invert.js","App.js","serviceWorker.js","index.js"],"names":["Invert","state","input","action","istring","document","getElementById","value","split","console","log","character","map","i","toUpperCase","toLowerCase","_this","setState","react_default","a","createElement","className","type","id","placeholder","onClick","this","Component","App","src_Invert","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAwCeA,6MApCXC,MAAQ,CACJC,MAAM,MAGTC,OAAO,WACH,IAAMC,EAAQC,SAASC,eAAe,WAAWC,MAAMC,MAAM,IAC7DC,QAAQC,IAAIN,GACZ,IAAIO,EAAYP,EAAQQ,IAAI,SAAAC,GAGzB,OAAIA,IAAMA,EAAEC,cACLD,EAAEE,cAEAF,IAAMA,EAAEE,cACPF,EAAEC,cAEDD,IAKdG,EAAKC,SAAS,CACVf,MAAMS,6EAKX,OAASO,EAAAC,EAAAC,cAAA,OAAKC,UAAY,aAClCH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,GAAG,UAAUC,YAAY,qBAA2BN,EAAAC,EAAAC,cAAA,WAASF,EAAAC,EAAAC,cAAA,WAChFF,EAAAC,EAAAC,cAAA,UAAQK,QAASC,KAAKvB,OAAQI,MAAM,UAApC,UAA4DW,EAAAC,EAAAC,cAAA,WAASF,EAAAC,EAAAC,cAAA,WACrEF,EAAAC,EAAAC,cAAA,MAAIG,GAAI,YAAYG,KAAKzB,MAAMC,eAhCVyB,aCUNC,MARf,WACE,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAACS,EAAD,QCIgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAAShC,SAASC,eAAe,SD2H3C,kBAAmBgC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2d081bfe.chunk.js","sourcesContent":["import React,{Component} from 'react';\n\n\nclass Invert extends Component {\n    state = { \n        input:''\n     }\n\n     action=()=>{\n         const istring=document.getElementById('istring').value.split(\"\");\n         console.log(istring);\n         let character = istring.map(i=>{\n\n\n            if (i === i.toUpperCase()) {\n            return i.toLowerCase()\n            }\n            else if (i === i.toLowerCase()){\n               return i.toUpperCase()\n            }else{\n                return i;\n            }\n        })\n\n\n         this.setState({\n             input:character\n         })\n         \n     }\n    render() { \n        return ( <div className = \"container\">\n<h1>Invert Strings</h1>  \n<input type=\"text\" id=\"istring\" placeholder=\"Enter any String\"></input><br></br><br></br>\n<button onClick={this.action} value=\"Submit\">INVERT</button><br></br><br></br>\n<h2 id =\"inverted\">{this.state.input}</h2>\n</div> );\n    }\n}\n \nexport default Invert;\n\n\n\n\n","import React from 'react';\n\nimport './App.css';\nimport Invert from './Invert';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Invert/> \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}